use std::{
    collections::hash_map::Entry,
    fs::File,
    io::{self, BufWriter, Write},
};

use rustc_hash::FxHashMap;

use crate::Scene;

pub fn render_mesh(out: &str, scene: &Scene) -> io::Result<()> {
    let f = File::create(out)?;
    let mut f = BufWriter::new(f);

    writeln!(f, "# Generated by ivo, https://github.com/danieledapo/r3d")?;

    let mut faces = vec![];
    let mut vertices = vec![];
    let mut vertices_ix = FxHashMap::default();
    let mut get_v = |x, y, z| {
        let n = vertices_ix.len();
        match vertices_ix.entry((x, y, z)) {
            Entry::Occupied(o) => *o.get(),
            Entry::Vacant(v) => {
                v.insert(n + 1);
                vertices.push((x, y, z));
                n + 1
            }
        }
    };

    for (x, y, z) in scene.boundary_voxels() {
        if !scene.is_set(x, y, z - 1) {
            let a = get_v(x, y, z);
            let b = get_v(x + 1, y, z);
            let c = get_v(x + 1, y + 1, z);
            let d = get_v(x, y + 1, z);

            faces.push((a, b, c, d));
        }

        if !scene.is_set(x, y, z + 1) {
            let a = get_v(x, y, z + 1);
            let b = get_v(x, y + 1, z + 1);
            let c = get_v(x + 1, y + 1, z + 1);
            let d = get_v(x + 1, y, z + 1);

            faces.push((a, b, c, d));
        }

        if !scene.is_set(x - 1, y, z) {
            let a = get_v(x, y, z);
            let b = get_v(x, y, z + 1);
            let c = get_v(x, y + 1, z + 1);
            let d = get_v(x, y + 1, z);

            faces.push((a, b, c, d));
        }

        if !scene.is_set(x + 1, y, z) {
            let a = get_v(x + 1, y, z);
            let b = get_v(x + 1, y + 1, z);
            let c = get_v(x + 1, y + 1, z + 1);
            let d = get_v(x + 1, y, z + 1);

            faces.push((a, b, c, d));
        }

        if !scene.is_set(x, y - 1, z) {
            let a = get_v(x, y, z);
            let b = get_v(x + 1, y, z);
            let c = get_v(x + 1, y, z + 1);
            let d = get_v(x, y, z + 1);

            faces.push((a, b, c, d));
        }

        if !scene.is_set(x, y + 1, z) {
            let a = get_v(x, y + 1, z);
            let b = get_v(x, y + 1, z + 1);
            let c = get_v(x + 1, y + 1, z + 1);
            let d = get_v(x + 1, y + 1, z);

            faces.push((a, b, c, d));
        }
    }

    for (x, y, z) in vertices {
        writeln!(
            f,
            "v {} {} {}",
            f64::from(x) - 0.5,
            f64::from(y) - 0.5,
            f64::from(z) - 0.5
        )?;
    }

    for (a, b, c, d) in faces {
        writeln!(f, "f {a} {b} {c} {d}")?;
    }

    Ok(())
}
